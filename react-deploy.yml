parameters:
  - name: siteName
    type: string

  - name: projectName
    type: string
    default: '$(System.TeamProject)'

  - name: azureLocation
    type: string

  - name: azureConnection
    type: string

  - name: targetEnvironment
    type: string
    values:
      - dev
      - prod
      - qa
    default: dev

  - name: purgeCDN
    type: boolean
    default: false

  - name: provision
    type: boolean
    default: false

stages:
- stage:  ${{ format('DeploySaticSite_{0}', upper(parameters.targetEnvironment)) }}

  variables:
    ${{ if eq(parameters.targetEnvironment, 'prod') }}:
      prefix: ''
    ${{ if ne(parameters.targetEnvironment, 'prod') }}:
      prefix: ${{ parameters.targetEnvironment }}

    Azure.Location: ${{ parameters.azureLocation }}
    Azure.ResourceGroup: ${{ format('{0}-{1}', variables.prefix, parameters.projectName) }}
    Azure.Storage.Account: ${{ format('{0}{1}', variables.prefix, lower(replace(parameters.siteName,'-',''))) }}

  jobs:
  - deployment: deployStatisSiteJob
    displayName: Provision and deploy to BLOB storage
    environment: ${{ format('{0}-{1}', 'frontend', parameters.targetEnvironment) }}
    strategy:
      runOnce:
        deploy:
          steps:

          - checkout: templates
            path: templates

          - pwsh: |
              dir env:AZURE*
            displayName: Show deploy parameters

          - task: CopyFiles@2
            displayName: Add repository custom scripts
            inputs:
              sourceFolder: $(Pipeline.Workspace)/drop
              contents: 'deploy/**'
              targetFolder: $(Pipeline.Workspace)/templates
              overwrite: true

          - task: AzureCLI@2
            displayName: Provisioning Azure Resources
            inputs:
              azureSubscription: ${{ parameters.azureConnection }}
              scriptType: pscore
              scriptLocation: scriptPath
              scriptPath: '$(Pipeline.Workspace)/templates/deploy/static-website.ps1'
            condition: and( succeeded(), eq(${{ parameters.provision }}, true) )

          - task: AzureCLI@2
            displayName: Copy website files to storage
            inputs:
              azureSubscription: ${{ parameters.azureConnection }}
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: az storage blob upload-batch --source $(Pipeline.Workspace)/drop/build/ --destination '$web' --auth-mode key

          - task: AzureCLI@2
            displayName: Purge CDN cache
            inputs:
              azureSubscription: ${{ parameters.azureConnection }}
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: az cdn endpoint purge -n $(Azure.Storage.Account) --profile-name $(Azure.Storage.Account)-cdn --content-paths '/*'
            condition: and( succeeded(), eq(${{ parameters.purgeCDN }}, true) )
