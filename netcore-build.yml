# ASP.NET Core - Basic Build Pipeline

# References:
# - https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core
#
# - Versioning .NET Core Assemblies in Azure DevOps isnâ€™t Straightforward
#   https://pleasereleaseme.net/versioning-net-core-assemblies-in-azure-devops-isnt-straightforward-and-probably-wont-be-in-other-ci-cd-tools-either/


parameters:
  - name: configuration
    type: string
    default: release

  - name: assemblyVersion
    type: string
    default: '1.0'

  - name: dbContext
    type: string
    default: ''

  - name: projects
    type: string
    default: '**/*.csproj'

stages:
- stage: StandardBuild

  jobs:
  - job: buildJob
    displayName: Build .NET Core App
    variables:
      configuration: ${{ parameters.configuration }}
      version.MajorMinor: ${{ parameters.AssemblyVersion }}
      version.Base: $[variables['version.MajorMinor']]
      version.Build: $[counter(variables['version.MajorMinor'], 1)]
      version.Full: '$(version.MajorMinor).$(version.Build)'

    steps:

    - script: echo "##vso[build.updatebuildnumber]build-$(version.Full)"
      displayName: Set Build Number

    - task: UseDotNet@2
      displayName: Define .NET SDK Version
      inputs:
        packageType: sdk
        version: '$(Global.dotnetVersion).x'
      condition: and(succeeded(), ne(variables['Global.dotnetVersion'], ''))

    - task: DotNetCoreCLI@2
      displayName: Restore packages dependencies
      inputs:
        command: restore
        projects: ${{ parameters.projects }}

    - task: DotNetCoreCLI@2
      displayName: Build dotnet app
      inputs:
        command: build
        projects: ${{ parameters.projects }}
        arguments: '--configuration $(configuration) --no-restore /p:Version=$(version.Full)'

    - script: |
        dotnet user-secrets set ConnectionStrings:default "DUMMY"
        dotnet tool install --global dotnet-ef
        dotnet ef migrations script --output $(Build.ArtifactStagingDirectory)/migrations.sql \
          --context ${{ parameters.dbContext }} --idempotent --no-build
      displayName: Generate EF migrations script
      condition: and( succeeded(), ne('${{ parameters.dbContext }}', '') )

    - task: DotNetCoreCLI@2
      displayName: Publish app to staging
      inputs:
        command: publish
        publishWebProjects: true
        arguments: '--configuration $(configuration) --no-build --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: true

    - task: CopyFiles@2
      displayName: Copy deploy scripts to staging
      inputs:
        contents: 'deploy/**'
        targetFolder: $(Build.ArtifactStagingDirectory)

    - publish: $(Build.ArtifactStagingDirectory)
      displayName: Publish artifact
      artifact: drop
