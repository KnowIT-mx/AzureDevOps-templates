parameters:
  - name: AzureConnection
    type: string

  - name: DatabaseName
    type: string

  - name: DatabaseServer
    type: string

  - name: Slot
    type: string

stages:
- stage: DeploySQL  #${{ format('Deploy_{0}', upper(parameters.TargetEnvironment)) }}
  pool:
    vmImage: 'windows-latest' # Requerido por la tarea 'SqlAzureDacpacDeployment@1'

  variables:
    dbName: ${{ parameters.DatabaseName }}
    dbServer: ${{ parameters.DatabaseServer }}
    deploymentSlot: ${{ parameters.Slot }}

  jobs:
  - job: deploySqlJob
    displayName: Provision and deploy changes to a SQL Database

    steps:

    - download: current
    - checkout: templates
      path: templates

    - task: CopyFiles@2
      displayName: Add repository custom scripts
      inputs:
        sourceFolder: $(Pipeline.Workspace)/drop
        contents: 'deploy/**'
        targetFolder: $(Pipeline.Workspace)/templates
        overwrite: true

    - task: AzureCLI@2
      displayName: Provision AzureSQL Database
      inputs:
        azureSubscription: ${{ parameters.AzureConnection }}
        scriptType: pscore
        scriptLocation: scriptPath
        scriptPath: '$(Pipeline.Workspace)/templates/deploy/database.ps1'

    - pwsh: |
        ($fileExists = Test-Path "$(Pipeline.Workspace)/drop/migrations.sql")
        echo "##vso[task.setvariable variable=doMigrations]$fileExists"
      displayName: Check if exist SQL migration script

    - task: AzureKeyVault@1
      inputs:
        azureSubscription: ${{ parameters.AzureConnection }}
        keyVaultName: $(Azure.ResourceGroup)
        secretsFilter: '$(deploymentSlot)ConnectionString'
      condition: and( succeeded(), eq( variables['doMigrations'], true ))

    - task: SqlAzureDacpacDeployment@1
      displayName: Commit changes to database
      inputs:
        azureSubscription: ${{ parameters.AzureConnection }}
        authenticationType: connectionString  # Valor obtenido de Azure KeyVault en paso previo
        connectionString: ${{ format('$({0}ConnectionString)', parameters.Slot) }}
        deployType: SqlTask
        sqlFile: $(Pipeline.Workspace)/drop/migrations.sql
      condition: and( succeeded(), eq( variables['doMigrations'], true ))